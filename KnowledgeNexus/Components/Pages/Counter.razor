@page "/counter"
@using KnowledgeNexusModels.Models

<h1>Create Course</h1>

<div class="container">
    <form @onsubmit="CreateCourse" class="row g-3">
        <div class="col-md-6">
            <label for="title" class="form-label">Title:</label>
            <input type="text" id="title" class="form-control" @bind="course.Title" />
        </div>

        <div class="col-md-6">
            <label for="description" class="form-label">Description:</label>
            <textarea id="description" class="form-control" @bind="course.Description"></textarea>
        </div>

        @foreach (var filter in filters)
        {
            <div class="col-md-6">
                <label class="form-label">Select @filter.Key:</label>
                <select class="form-select" @onchange="e => SetFilter(filter.Key, e.Value.ToString())">
                    <option value="" selected>Choose...</option>
                    @foreach (var option in filter.Value)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
            </div>
        }

        <!-- File inputs -->
        <div class="col-md-6">
            <label for="audioInput" class="form-label">Audio File:</label>
            <input type="file" id="audioInput" class="form-control" @onchange="HandleAudioUpload" />
        </div>

        <div class="col-md-6">
            <label for="videoInput" class="form-label">Video File:</label>
            <input type="file" id="videoInput" class="form-control" @onchange="HandleVideoUpload" />
        </div>

        <div class="col-md-6">
            <label for="pdfInput" class="form-label">PDF File:</label>
            <input type="file" id="pdfInput" class="form-control" @onchange="HandlePdfUpload" />
        </div>

        <div class="col-12">
            <button type="submit" class="btn btn-primary">Create</button>
        </div>
    </form>
</div>

@code {
    Course course = new Course();

    async Task CreateCourse()
    {
        // Call service to save course data in the database
        // await courseService.CreateCourse(course);
    }

    void HandleAudioUpload()
    {
        // Handle audio file upload
        // Set the appropriate properties in the course object
    }

    void HandleVideoUpload()
    {
        // Handle video file upload
        // Set the appropriate properties in the course object
    }

    void HandlePdfUpload()
    {
        // Handle PDF file upload
        // Set the appropriate properties in the course object
    }

    private readonly Dictionary<string, List<string>> filters = new()
    {
        { "Subject", new List<string> { "Math", "Science", "Literature" } },
        { "Partner", new List<string> { "University A", "Company B", "Institution C" } },
        // Add other filters as needed
    };

    private readonly Dictionary<string, string> selectedFilters = new Dictionary<string, string>();

    private void SetFilter(string filterKey, string selectedOption)
    {
        if (!selectedFilters.ContainsKey(filterKey))
        {
            selectedFilters.Add(filterKey, selectedOption);
        }
        else
        {
            selectedFilters[filterKey] = selectedOption;
        }
    }

}
