@page "/create"
@using KnowledgeNexusModels.Models
@rendermode InteractiveServer

<PageTitle>Create Course</PageTitle>

<h1>Create Course</h1>
<div class="container">
	<div class="row">
		<div class="col-md-6">
			<form @onsubmit="CreateCourse" class="g-3">
				<div class="mb-3">
					<label for="title" class="form-label">Title:</label>
					<input type="text" id="title" class="form-control" @bind="course.Title" />
				</div>

				<div class="mb-3">
					<label for="description" class="form-label">Description:</label>
					<textarea id="description" class="form-control" @bind="course.Description"></textarea>
				</div>

				<h3>Filters</h3>
				<div class="search-container">
					<input type="text" placeholder="Add category" @bind="Tag">
					<button @onclick="AddTag">Add</button>
					<!-- Include dropdowns for additional filters if needed -->
				</div>

				<button type="submit" class="btn btn-primary">Create</button>
			</form>
		</div>

		<div class="col-md-6">
			<h3>Input Content</h3>
			<div class="mb-3">
				<label for="contentType" class="form-label">Content Type:</label>
				<select id="contentType" class="form-select" @bind="selectedContentType">
					<option value="Audio">Audio</option>
					<option value="Video">Video</option>
					<option value="PDF">PDF</option>
				</select>
			</div>
			<div class="mb-3">
				<label for="contentUrl" class="form-label">Content URL:</label>
				<input type="text" id="contentUrl" class="form-control" @bind="contentUrl" />
			</div>
			<button @onclick="AddContent" class="btn btn-primary">Add Content</button>
		</div>
	</div>
</div>

@code {
	Course course = new Course();
	string selectedContentType = "Audio";
	string contentUrl = string.Empty;
	public string Tag { get; set; }

	async Task CreateCourse()
	{
		// Call service to save course data in the database
		// await courseService.CreateCourse(course);
	}


	void AddTag()
	{
		if (!string.IsNullOrWhiteSpace(Tag))
		{
			course.Categories.Add(Tag);
			Tag = string.Empty;
		}
	}

	void AddContent()
	{
		if (!string.IsNullOrWhiteSpace(contentUrl))
		{
			ContentType type;
			Enum.TryParse(selectedContentType, out type);

			course.Contents.Add(new CourseContent
				{
					Type = type,
					Url = contentUrl
				});

			// Clear the input fields after adding content
			contentUrl = string.Empty;
		}
	}
}
